/*
---------------------------------------------------------------
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
    ANIMATION DU COEUR DES CARTES DE LA PAGE D'ACCUEIL
---------------------------------------------------------------
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
POUR INFO :
Comme hover ou active ":checked" permet de cibler les boutons cochés.
*/

/*
Classe qui gère le bouton de l'animation du cœur.
*/

.heart-animation-progress {
  /*
    Classe qui englobe le bouton du cœur des cartes de la page d'accueil et du titre des pages menus.
    Il passe au premier plan avec la propriété : "z-index-1", pour être accessible au click,
    sur les cartes de la page d'accueil
  
      */
  z-index: 1;

  // Taill de l'icône du coeur.
  max-width: 100%;
  font-size: 30px;
}

/* 
  (1) On cible 2 éléments pour les masquer au chargement de la page :
  (a) le bouton checkbox par default.
  (b) l'icône "coeur" du second-plan
  */
.heart-animation-progress {
  input[type="checkbox"], // (1a)
    .heart-second-plan // (1b)
  {
    display: none;
  }
}

/*
  (2a) Quand l'input est cochée, ":checked"
  Grâce au combinateur "~" on cible les classes des élémnents qui se situent, tout de suite après l'input.
  Donc, tout de suite après l'input...
  (2b) Je cible l'icône du ".premier-plan", pour faire disparaitre son bloc
  */

.heart-animation-progress {
  & input[type="checkbox"]:checked // (2a)
    ~ .heart-premier-plan  // (2b)
  {
    display: none;
  }
}

/*
  (3a) Quand l'input est cochée, ":checked"
  Grâce au combinateur "~" on cible les classes des élémnents qui se situent, tout de suite après l'input.
  Donc, tout de suite après l'input...
  (3b) Je cible l'icône du "second plan", pour faire apparaitre son bloc
  */

.heart-animation-progress {
  & input[type="checkbox"]:checked // (3a)
    ~ .heart-second-plan // (3b)
  {
    display: block; // (3b)
    /* APPEL DE L'ANIMATION 3
    Qui supprime le bloc qui contient l'animation du loading
    */
    animation-name: heart-color-progress-keyframe;
    animation-delay: 0s; // Temps avant le démarage de l'animation.
    animation-duration: 0.7s; // Durée de l'animation.
    animation-fill-mode: both;

    // Couleur dégradée en arrière plan du bloc qui contient l'icône du cœur.
    background-image: linear-gradient(45deg, $color-02 20%, $color-01 100%);
    // Appliquer le Bg sur toute la largeur du bloc.
    background-size: 100%;

    /*
      (3c) La propriété : background-clip :
      Permet d'utiliser la forme (d'un texte) ou dans notre cas, la forme du cœur comme masque.
      Si nous rendons transparente, la couleur d'oridgine de ce texte ou cette icône, nous verrons apparaitre dans la forme (texte ou icône),
      servant de masque, le fond de couleur dégradé, appliqué au bloc qui contient l'icône.
       */
    background-clip: text; // (3c)
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
}

/*
  (3c) LA PROPRITÉTÉ : background-clip
  Définit la manière dont l'arrière plan d'un élément s'étend sous la boite de cet éléments.
  1) Est-ce que l'arrière plan s'etend jusqu'à la bordure du bloc ?
  2) Est-ce que l'arrière plan s'etend jusqu'aux paddind du bloc ?
  3) Est-ce que l'arrière plan s'etend jusqu'au contenu du bloc ?
  4) Est-ce que l'arrière plan s'etend seulement au text contenu dans le bloc ?
  Dans ce dernier cas, pour que l'arrière plan apparaisse dans le texte,
  il faudra que la couleur d'origine ou par defaut du texte soit TRANSPARENTE.
  */

/*  KEYFRAME
Qui rend l'apparition du cœur progressif
*/

@keyframes heart-color-progress-keyframe {
  0% {
    opacity: 0.5;
  }

  100% {
    opacity: 1;
    animation-timing-function: cubic-bezier(
      0,
      1.26,
      0.89,
      1.02
    ); // Fluidité de l'animation.
  }
}
